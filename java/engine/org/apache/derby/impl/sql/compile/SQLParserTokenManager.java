/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
/*

   Derby - File org.apache.derby.impl.sql.compile.sqlgrammar.jj

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to you under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

*/

package org.apache.derby.impl.sql.compile;
import org.apache.derby.iapi.sql.Statement;
import org.apache.derby.iapi.sql.StatementType;
/* aggregates */
import org.apache.derby.impl.sql.compile.CountAggregateDefinition;
import org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition;
import org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition;
import org.apache.derby.impl.sql.compile.AggregateNode;
import org.apache.derby.impl.sql.compile.BinaryOperatorNode;
import org.apache.derby.impl.sql.compile.CallStatementNode;
import  org.apache.derby.impl.sql.compile.CharConstantNode;
import  org.apache.derby.impl.sql.compile.CastNode;
import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;
import org.apache.derby.impl.sql.compile.ColumnReference;
import org.apache.derby.impl.sql.compile.CursorNode;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.sql.compile.FromList;
import org.apache.derby.impl.sql.compile.FromSubquery;
import org.apache.derby.impl.sql.compile.FromTable;
import org.apache.derby.impl.sql.compile.GroupByList;
import org.apache.derby.impl.sql.compile.HasNodeVisitor;
import org.apache.derby.impl.sql.compile.JavaToSQLValueNode;
import org.apache.derby.impl.sql.compile.JoinNode;
import org.apache.derby.impl.sql.compile.MethodCallNode;
import org.apache.derby.impl.sql.compile.QueryTreeNode;
import org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor;
import org.apache.derby.impl.sql.compile.ResultColumnList;
import org.apache.derby.impl.sql.compile.ResultColumn;
import org.apache.derby.impl.sql.compile.OrderByList;
import org.apache.derby.impl.sql.compile.OrderByColumn;
import org.apache.derby.impl.sql.compile.ResultSetNode;
import org.apache.derby.impl.sql.compile.SelectNode;
import org.apache.derby.impl.sql.compile.SubqueryNode;
import org.apache.derby.impl.sql.compile.TableName;
import org.apache.derby.impl.sql.compile.TernaryOperatorNode;
import org.apache.derby.impl.sql.compile.ParameterNode;
import org.apache.derby.impl.sql.compile.PrivilegeNode;
import org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;
import org.apache.derby.impl.sql.compile.DMLModStatementNode;
import org.apache.derby.impl.sql.compile.RoutineDesignator;
import org.apache.derby.impl.sql.compile.StatementNode;
import org.apache.derby.impl.sql.compile.TableElementList;
import org.apache.derby.impl.sql.compile.TableElementNode;
import org.apache.derby.impl.sql.compile.TableOperatorNode;
import org.apache.derby.impl.sql.compile.TablePrivilegesNode;
import org.apache.derby.impl.sql.compile.TransactionStatementNode;
import org.apache.derby.impl.sql.compile.TriggerReferencingStruct;
import org.apache.derby.impl.sql.compile.UnionNode;
import org.apache.derby.impl.sql.compile.IntersectOrExceptNode;
import org.apache.derby.impl.sql.compile.UnaryOperatorNode;
import org.apache.derby.impl.sql.compile.UntypedNullConstantNode;
import org.apache.derby.impl.sql.compile.UpdateNode;
import org.apache.derby.impl.sql.compile.UserTypeConstantNode;
import org.apache.derby.impl.sql.compile.ValueNode;
import org.apache.derby.impl.sql.compile.ValueNodeList;
import org.apache.derby.impl.sql.compile.GroupByColumn;
import org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode;
import org.apache.derby.impl.sql.compile.DDLStatementNode;
import org.apache.derby.impl.sql.compile.AlterTableNode;
import org.apache.derby.impl.sql.compile.ParseException;
import org.apache.derby.impl.sql.compile.Token;
import org.apache.derby.impl.sql.compile.TokenMgrError;
import org.apache.derby.impl.sql.compile.SQLParserConstants;
import org.apache.derby.impl.sql.compile.CharStream;
import org.apache.derby.impl.sql.execute.TablePrivilegeInfo;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.conn.Authorizer;
import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.execute.ExecutionContext;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.iapi.sql.compile.TypeCompiler;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.types.DateTimeDataValue;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.types.DataTypeUtilities;
import org.apache.derby.iapi.types.StringDataValue;
import org.apache.derby.iapi.types.DataValueDescriptor;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.reference.Property;
import org.apache.derby.iapi.reference.SQLState;
import org.apache.derby.iapi.reference.JDBC30Translation;
import org.apache.derby.iapi.reference.Limits;
import org.apache.derby.iapi.sql.compile.CompilerContext;
import org.apache.derby.iapi.sql.compile.C_NodeTypes;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.sql.compile.NodeFactory;
import org.apache.derby.iapi.services.sanity.SanityManager;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.TypeDescriptor;
import org.apache.derby.catalog.types.RoutineAliasInfo;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.services.io.StoredFormatIds;
import org.apache.derby.iapi.util.ReuseFactory;
import org.apache.derby.iapi.services.io.FormatableBitSet;
import org.apache.derby.iapi.util.StringUtil;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import java.lang.Character;

public class SQLParserTokenManager implements SQLParserConstants
{
        void    CommonTokenAction(Token t)
        {
                t.beginOffset = input_stream.getBeginOffset();
                t.endOffset = input_stream.getEndOffset();
        }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_15(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0)
{
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_15(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_15(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_15()
{
   switch(curChar)
   {
      case 69:
         return jjStopAtPos(0, 50);
      case 101:
         return jjStopAtPos(0, 50);
      default :
         return jjMoveNfa_15(0, 0);
   }
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_15(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 52)
                     kind = 52;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 51)
                     kind = 51;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffdfffffffdfL & l) != 0L)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0)
{
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_14(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_14(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_14()
{
   switch(curChar)
   {
      case 73:
         return jjStopAtPos(0, 47);
      case 105:
         return jjStopAtPos(0, 47);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private final int jjMoveNfa_14(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 49)
                     kind = 49;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 48)
                     kind = 48;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 49)
                     kind = 49;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffdfffffffdffL & l) != 0L)
                     kind = 49;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 49)
                     kind = 49;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_17()
{
   return jjMoveNfa_17(4, 0);
}
private final int jjMoveNfa_17(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 57;
                  jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 2:
                  if (curChar == 10 && kind > 57)
                     kind = 57;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  kind = 57;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 80:
         return jjStopAtPos(0, 35);
      case 112:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private final int jjMoveNfa_10(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 37)
                     kind = 37;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 36)
                     kind = 36;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 37)
                     kind = 37;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffefffffffeffffL & l) != 0L)
                     kind = 37;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 37)
                     kind = 37;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 66:
         return jjStopAtPos(0, 17);
      case 98:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 19)
                     kind = 19;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 18)
                     kind = 18;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 19)
                     kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbfffffffbL & l) != 0L)
                     kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_13(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_13(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 84:
         return jjStopAtPos(0, 44);
      case 116:
         return jjStopAtPos(0, 44);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private final int jjMoveNfa_13(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 46)
                     kind = 46;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 45)
                     kind = 45;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 46)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffefffffffefffffL & l) != 0L)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 46)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 69:
         return jjStopAtPos(0, 38);
      case 101:
         return jjStopAtPos(0, 38);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private final int jjMoveNfa_11(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 40)
                     kind = 40;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 39)
                     kind = 39;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 40)
                     kind = 40;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffdfffffffdfL & l) != 0L)
                     kind = 40;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 40)
                     kind = 40;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 89:
         return jjStopAtPos(0, 20);
      case 121:
         return jjStopAtPos(0, 20);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 22)
                     kind = 22;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 21)
                     kind = 21;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfdfffffffdffffffL & l) != 0L)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 79:
         return jjStopAtPos(0, 32);
      case 111:
         return jjStopAtPos(0, 32);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 34)
                     kind = 34;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 33)
                     kind = 33;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 34)
                     kind = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffff7fffffff7fffL & l) != 0L)
                     kind = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         {
         jjmatchedKind = 7;
         jjmatchedPos = 0;
         }
         return jjMoveNfa_1(0, 0);
      case 32:
         {
         jjmatchedKind = 6;
         jjmatchedPos = 0;
         }
         return jjMoveNfa_1(0, 0);
      case 68:
         {
         jjmatchedKind = 8;
         jjmatchedPos = 0;
         }
         return jjMoveNfa_1(0, 0);
      case 100:
         {
         jjmatchedKind = 8;
         jjmatchedPos = 0;
         }
         return jjMoveNfa_1(0, 0);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 10)
                     kind = 10;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffefffffffefL & l) != 0L)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjMoveStringLiteralDfa0_18()
{
   return jjMoveNfa_18(4, 0);
}
private final int jjMoveNfa_18(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 58;
                  jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 2:
                  if (curChar == 10 && kind > 58)
                     kind = 58;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  kind = 58;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 82:
         return jjStopAtPos(0, 14);
      case 114:
         return jjStopAtPos(0, 14);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 16)
                     kind = 16;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 15)
                     kind = 15;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffbfffffffbffffL & l) != 0L)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 69:
         return jjStopAtPos(0, 11);
      case 101:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 13)
                     kind = 13;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffdfffffffdfL & l) != 0L)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 45:
         return jjStopAtPos(0, 23);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 24)
                     kind = 24;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xffffdfffffffffffL & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 25)
                     kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 82:
         return jjStopAtPos(0, 29);
      case 114:
         return jjStopAtPos(0, 29);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 31)
                     kind = 31;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 30)
                     kind = 30;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 31)
                     kind = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffbfffffffbffffL & l) != 0L)
                     kind = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 31)
                     kind = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000L);
      case 34:
         jjmatchedKind = 414;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 415;
         return jjMoveNfa_0(0, 0);
      case 38:
         jjmatchedKind = 416;
         return jjMoveNfa_0(0, 0);
      case 39:
         jjmatchedKind = 417;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 420;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 421;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 422;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 423;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 424;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 425;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1000000000000000L);
      case 46:
         jjmatchedKind = 426;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 427;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 428;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200000000000L);
      case 59:
         jjmatchedKind = 430;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 431;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x5000000000000L);
      case 61:
         jjmatchedKind = 433;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 436;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000000000000L);
      case 63:
         jjmatchedKind = 438;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0xffL, 0x0L, 0x0L, 0x780L, 0x2000000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f00L, 0x0L, 0x0L, 0x800L, 0x4008100000L, 0x0L);
      case 67:
         jjmatchedKind = 268;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ffffffc000L, 0x0L, 0x0L, 0x7e000L, 0xf8000e00000L, 0x0L);
      case 68:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fff00000000000L, 0x0L, 0x0L, 0xf80000L, 0x700001000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0x1fL, 0x0L, 0x0L, 0x3800004000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fe0L, 0x0L, 0x1000000L, 0x4000000000000L, 0x0L);
      case 71:
         jjmatchedKind = 448;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1f8000L, 0x0L, 0x2000000L, 0x2000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x600000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fff800000L, 0x0L, 0xfc000000L, 0x8000000000000L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000L, 0x0L, 0x0L, 0x10000000000000L, 0x0L);
      case 75:
         jjmatchedKind = 446;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1f0000000000L, 0x0L, 0x7f00000000L, 0xe0000030000000L, 0x0L);
      case 77:
         jjmatchedKind = 447;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3e00000000000L, 0x0L, 0x1f8000000000L, 0x700000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fc000000000000L, 0x0L, 0x1e00000000000L, 0x3800000000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf800000000000000L, 0x1fL, 0x2000000000000L, 0xc000000000000000L, 0x7L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fe0L, 0x1c000000000000L, 0x0L, 0x38L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fc000L, 0x3e0000000000000L, 0x40000000L, 0xffc0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fff800000L, 0xfc00000000000000L, 0x800003ffL, 0x3ff0000L);
      case 84:
         jjmatchedKind = 231;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfff0000000000L, 0x0L, 0x1fc00L, 0x4000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7f0000000000000L, 0x0L, 0x60000L, 0x18000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf800000000000000L, 0x1L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3eL, 0x80000L, 0x20000000L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1f00000000L, 0x0L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 441;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 442;
         return jjMoveNfa_0(0, 0);
      case 95:
         jjmatchedKind = 439;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0xffL, 0x0L, 0x0L, 0x780L, 0x2000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f00L, 0x0L, 0x0L, 0x800L, 0x4008100000L, 0x0L);
      case 99:
         jjmatchedKind = 268;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ffffffc000L, 0x0L, 0x0L, 0x7e000L, 0xf8000e00000L, 0x0L);
      case 100:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fff00000000000L, 0x0L, 0x0L, 0xf80000L, 0x700001000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0x1fL, 0x0L, 0x0L, 0x3800004000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fe0L, 0x0L, 0x1000000L, 0x4000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1f8000L, 0x0L, 0x2000000L, 0x2000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x600000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fff800000L, 0x0L, 0xfc000000L, 0x8000000000000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000L, 0x0L, 0x0L, 0x10000000000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1f0000000000L, 0x0L, 0x7f00000000L, 0xe0000030000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3e00000000000L, 0x0L, 0x1f8000000000L, 0x700000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fc000000000000L, 0x0L, 0x1e00000000000L, 0x3800000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf800000000000000L, 0x1fL, 0x2000000000000L, 0xc000000000000000L, 0x7L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fe0L, 0x1c000000000000L, 0x0L, 0x38L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fc000L, 0x3e0000000000000L, 0x40000000L, 0xffc0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fff800000L, 0xfc00000000000000L, 0x800003ffL, 0x3ff0000L);
      case 116:
         jjmatchedKind = 231;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfff0000000000L, 0x0L, 0x1fc00L, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7f0000000000000L, 0x0L, 0x60000L, 0x18000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf800000000000000L, 0x1L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3eL, 0x80000L, 0x20000000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1f00000000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 418;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 440;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000000000000L);
      case 125:
         jjmatchedKind = 419;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         break;
      case 58:
         if ((active6 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 429;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active6 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 432;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 435;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 437;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active6 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 434;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 444;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3c000L, active2, 0xc610000200020L, active3, 0xf800010000000060L, active4, 0x404200300382000L, active5, 0x10800001200000L, active6, 0x18L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000180L, active5, 0x100000000000L, active6, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0x1800000L, active4, 0x800400000000200L, active5, 0x20000000000000L, active6, 0x8000000L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0x800000L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3ff00000000300L, active2, 0x20068000008040L, active3, 0x2001e0fc000L, active4, 0x31e0000c02400040L, active5, 0x1b00004002000000L, active6, 0x73fc0L);
      case 70:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000002000000000L, active6, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3c0000L, active2, 0L, active3, 0L, active4, 0x6L, active5, 0x80400L, active6, 0x20080000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c0000000000c00L, active2, 0x1880000000080L, active3, 0xc0000100000L, active4, 0x9L, active5, 0x200008007800L, active6, 0L);
      case 74:
         if ((active5 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 382;
            jjmatchedPos = 1;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000000000L, active1, 0x800000000400000L, active2, 0x10100L, active3, 0L, active4, 0x8000000004c00L, active5, 0x8000000000L, active6, 0x3L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0x20000000L, active4, 0L, active5, 0x1001f00000000L, active6, 0L);
      case 78:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x3000000000000001L, active2, 0x2000000ffc000000L, active3, 0x70000000000000L, active4, 0xf8000000L, active5, 0x8000000020000L, active6, 0L);
      case 79:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000fff801000L, active2, 0x82104000440e00L, active3, 0x40600000L, active4, 0x2000ff001078010L, active5, 0x4c0430010100000L, active6, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc000000000000000L, active3, 0x180000080000000L, active4, 0L, active5, 0L, active6, 0x200000L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xf00000000L, active4, 0xc000000000000000L, active5, 0x7fL, active6, 0x500000L);
      case 82:
         if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x4000L) != 0L)
         {
            jjmatchedKind = 398;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 412;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400001000000002L, active2, 0x181000L, active3, 0x7e00000001f82L, active4, 0x10000000000020L, active5, 0x8000L, active6, 0x4000020L);
      case 83:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x8000L) != 0L)
         {
            jjmatchedKind = 399;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000018L, active2, 0x2000000000L, active3, 0x600000000000000L, active4, 0L, active5, 0x40000L, active6, 0L);
      case 84:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x60000180L, active6, 0x3800000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7e000000040L, active2, 0x700000000006000L, active3, 0x300000200cL, active4, 0x1900000000000L, active5, 0x80080c00000L, active6, 0x4L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0x10L, active4, 0L, active5, 0x2000000000000000L, active6, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x1fL, active3, 0L, active4, 0L, active5, 0x2000004000000L, active6, 0L);
      case 89:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x800000L, active5, 0x10200L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3c000L, active2, 0xc610000200020L, active3, 0xf800010000000060L, active4, 0x404200300382000L, active5, 0x10800001200000L, active6, 0x18L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000180L, active5, 0x100000000000L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0x1800000L, active4, 0x800400000000200L, active5, 0x20000000000000L, active6, 0x8000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0x800000L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3ff00000000300L, active2, 0x20068000008040L, active3, 0x2001e0fc000L, active4, 0x31e0000c02400040L, active5, 0x1b00004002000000L, active6, 0x73fc0L);
      case 102:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000002000000000L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3c0000L, active2, 0L, active3, 0L, active4, 0x6L, active5, 0x80400L, active6, 0x20080000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c0000000000c00L, active2, 0x1880000000080L, active3, 0xc0000100000L, active4, 0x9L, active5, 0x200008007800L, active6, 0L);
      case 106:
         if ((active5 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 382;
            jjmatchedPos = 1;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000000000L, active1, 0x800000000400000L, active2, 0x10100L, active3, 0L, active4, 0x8000000004c00L, active5, 0x8000000000L, active6, 0x3L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0x20000000L, active4, 0L, active5, 0x1001f00000000L, active6, 0L);
      case 110:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x3000000000000001L, active2, 0x2000000ffc000000L, active3, 0x70000000000000L, active4, 0xf8000000L, active5, 0x8000000020000L, active6, 0L);
      case 111:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000fff801000L, active2, 0x82104000440e00L, active3, 0x40600000L, active4, 0x2000ff001078010L, active5, 0x4c0430010100000L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc000000000000000L, active3, 0x180000080000000L, active4, 0L, active5, 0L, active6, 0x200000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xf00000000L, active4, 0xc000000000000000L, active5, 0x7fL, active6, 0x500000L);
      case 114:
         if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x4000L) != 0L)
         {
            jjmatchedKind = 398;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 412;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400001000000002L, active2, 0x181000L, active3, 0x7e00000001f82L, active4, 0x10000000000020L, active5, 0x8000L, active6, 0x4000020L);
      case 115:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x8000L) != 0L)
         {
            jjmatchedKind = 399;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000018L, active2, 0x2000000000L, active3, 0x600000000000000L, active4, 0L, active5, 0x40000L, active6, 0L);
      case 116:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x60000180L, active6, 0x3800000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7e000000040L, active2, 0x700000000006000L, active3, 0x300000200cL, active4, 0x1900000000000L, active5, 0x80080c00000L, active6, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0x10L, active4, 0L, active5, 0x2000000000000000L, active6, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x1fL, active3, 0L, active4, 0L, active5, 0x2000004000000L, active6, 0L);
      case 121:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x800000L, active5, 0x10200L, active6, 0L);
      case 124:
         if ((active6 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 443;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000000L, active6, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x401000009c0000L, active2, 0x20000080000L, active3, 0x1e000a000c000L, active4, 0x800000000000040L, active5, 0x2020008000040180L, active6, 0x8880040L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x11000002000L, active4, 0x8000L, active5, 0x80000000L, active6, 0L);
      case 67:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc000c00000000000L, active2, 0x1L, active3, 0x2000000L, active4, 0x1000003008000000L, active5, 0xc2c00000020000L, active6, 0L);
      case 68:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x1L) != 0L)
         {
            jjmatchedKind = 384;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x2000004000000L, active3, 0x80000000000002L, active4, 0x30000000000L, active5, 0x408000000000000L, active6, 0x2L);
      case 69:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000200000L, active2, 0x4000000000800006L, active3, 0x200000000000190L, active4, 0x10000004000007L, active5, 0x80400L, active6, 0x200000L);
      case 70:
         if ((active5 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 383;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x80L) != 0L)
         {
            jjmatchedKind = 391;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7000000000000L, active2, 0x40000000000L, active3, 0x10000L, active4, 0x400000L, active5, 0x4000000000L, active6, 0x100L);
      case 71:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0x100000L, active4, 0x4000000000L, active5, 0x8000000L, active6, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0x800000L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4008000008L, active3, 0x432000000000e00L, active4, 0x10000020L, active5, 0L, active6, 0x24000000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000L, active5, 0L, active6, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x40000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x8000007000000L, active2, 0x2300000000002020L, active3, 0x1800000e04220000L, active4, 0xc020c00000002000L, active5, 0x1e0020007fL, active6, 0x100000L);
      case 77:
         if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0x400000001000000L, active3, 0xe0040000000L, active4, 0x1300000010000L, active5, 0x10000007800L, active6, 0L);
      case 78:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3f0000400L, active2, 0x1000010004000L, active3, 0L, active4, 0x40502860000L, active5, 0x20010000200L, active6, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000400000L, active2, 0x2000111100L, active3, 0x1000L, active4, 0x20004800L, active5, 0x100000L, active6, 0x20L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0x100000000000000L, active4, 0x40000000000000L, active5, 0x1000004010000L, active6, 0L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x30000L);
      case 82:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7e400000000L, active2, 0x480L, active3, 0xe000000001000040L, active4, 0x2000080201000010L, active5, 0x280060c00000L, active6, 0x1400008L);
      case 83:
         if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9b000000003c010L, active2, 0x100c0000000L, active3, 0x4008040000L, active4, 0x84000000000100L, active5, 0x100000000000000L, active6, 0xc10L);
      case 84:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x4L) != 0L)
         {
            jjmatchedKind = 386;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x1240L, active2, 0x800c200e00040050L, active3, 0xcL, active4, 0x100000040180208L, active5, 0x200002003000000L, active6, 0x43000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000800000000L, active2, 0x400800L, active3, 0x4000000000000L, active4, 0L, active5, 0x8000L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0x80000L, active4, 0x400000880000000L, active5, 0x10000000000000L, active6, 0L);
      case 87:
         if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 379;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0x400000L, active4, 0x400L, active5, 0x1000000000000000L, active6, 0L);
      case 88:
         if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x401000009c0000L, active2, 0x20000080000L, active3, 0x1e000a000c000L, active4, 0x800000000000040L, active5, 0x2020008000040180L, active6, 0x8880040L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x11000002000L, active4, 0x8000L, active5, 0x80000000L, active6, 0L);
      case 99:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc000c00000000000L, active2, 0x1L, active3, 0x2000000L, active4, 0x1000003008000000L, active5, 0xc2c00000020000L, active6, 0L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x1L) != 0L)
         {
            jjmatchedKind = 384;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x2000004000000L, active3, 0x80000000000002L, active4, 0x30000000000L, active5, 0x408000000000000L, active6, 0x2L);
      case 101:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000200000L, active2, 0x4000000000800006L, active3, 0x200000000000190L, active4, 0x10000004000007L, active5, 0x80400L, active6, 0x200000L);
      case 102:
         if ((active5 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 383;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x80L) != 0L)
         {
            jjmatchedKind = 391;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7000000000000L, active2, 0x40000000000L, active3, 0x10000L, active4, 0x400000L, active5, 0x4000000000L, active6, 0x100L);
      case 103:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0x100000L, active4, 0x4000000000L, active5, 0x8000000L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0x800000L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4008000008L, active3, 0x432000000000e00L, active4, 0x10000020L, active5, 0L, active6, 0x24000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000L, active5, 0L, active6, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x40000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x8000007000000L, active2, 0x2300000000002020L, active3, 0x1800000e04220000L, active4, 0xc020c00000002000L, active5, 0x1e0020007fL, active6, 0x100000L);
      case 109:
         if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0x400000001000000L, active3, 0xe0040000000L, active4, 0x1300000010000L, active5, 0x10000007800L, active6, 0L);
      case 110:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3f0000400L, active2, 0x1000010004000L, active3, 0L, active4, 0x40502860000L, active5, 0x20010000200L, active6, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000400000L, active2, 0x2000111100L, active3, 0x1000L, active4, 0x20004800L, active5, 0x100000L, active6, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0x100000000000000L, active4, 0x40000000000000L, active5, 0x1000004010000L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x30000L);
      case 114:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7e400000000L, active2, 0x480L, active3, 0xe000000001000040L, active4, 0x2000080201000010L, active5, 0x280060c00000L, active6, 0x1400008L);
      case 115:
         if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9b000000003c010L, active2, 0x100c0000000L, active3, 0x4008040000L, active4, 0x84000000000100L, active5, 0x100000000000000L, active6, 0xc10L);
      case 116:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x4L) != 0L)
         {
            jjmatchedKind = 386;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x1240L, active2, 0x800c200e00040050L, active3, 0xcL, active4, 0x100000040180208L, active5, 0x200002003000000L, active6, 0x43000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000800000000L, active2, 0x400800L, active3, 0x4000000000000L, active4, 0L, active5, 0x8000L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0x80000L, active4, 0x400000880000000L, active5, 0x10000000000000L, active6, 0L);
      case 119:
         if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 379;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0x400000L, active4, 0x400L, active5, 0x1000000000000000L, active6, 0L);
      case 120:
         if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
         if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 372;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4001001000000400L, active2, 0x10000000000100L, active3, 0x80000000020000L, active4, 0x800400L, active5, 0x40000001000000L, active6, 0x1208L);
      case 66:
         if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L, active2, 0x10000L, active3, 0x2000000000000000L, active4, 0x1000000000000L, active5, 0L, active6, 0x800000L);
      case 67:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa000000020c000L, active2, 0x200000004044L, active3, 0x4000000280001000L, active4, 0x14000000020000L, active5, 0x2000000L, active6, 0x200000L);
      case 68:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L, active4, 0L, active5, 0x400000L, active6, 0x40L);
      case 69:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 301;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x800L) != 0L)
         {
            jjmatchedKind = 331;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 378;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x800e000000000010L, active2, 0x4001006d1000411L, active3, 0x1000c0404810006L, active4, 0x462000842000000L, active5, 0x8002200007000L, active6, 0x500L);
      case 71:
         if ((active5 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 348;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0x4700000000L, active5, 0x40000L, active6, 0x4000000L);
      case 72:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x100000L, active4, 0L, active5, 0x200000000000000L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000100L, active2, 0x8004000004200000L, active3, 0x1000000000000L, active4, 0x2000030000400200L, active5, 0x68000000L, active6, 0x1100000L);
      case 75:
         if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 375;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L, active5, 0L, active6, 0L);
      case 76:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x200000L) != 0L)
         {
            jjmatchedKind = 341;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x900003800000L, active2, 0x200002000000000L, active3, 0x10020202000L, active4, 0x800800000002000L, active5, 0x2000004100000L, active6, 0x2000000L);
      case 77:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0x200L, active4, 0x10000L, active5, 0L, active6, 0L);
      case 78:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400L) != 0L)
         {
            jjmatchedKind = 330;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80000L) != 0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x830000000L, active2, 0x880800L, active3, 0x440e00000000000L, active4, 0x4000002L, active5, 0x8000L, active6, 0L);
      case 79:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0x10000003080400L, active4, 0x400080008000L, active5, 0x4000020200L, active6, 0L);
      case 80:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000088L, active4, 0x100000000000L, active5, 0x10400000000L, active6, 0x20L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L, active4, 0L, active5, 0x800000000L, active6, 0L);
      case 82:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3e400180000L, active2, 0L, active3, 0x10L, active4, 0x8000004L, active5, 0x2000000000000080L, active6, 0x80000L);
      case 83:
         if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x40000L) != 0L)
         {
            jjmatchedKind = 402;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400c0400000L, active2, 0xa8L, active3, 0x1808000100L, active4, 0L, active5, 0x120189080000000L, active6, 0x8000010L);
      case 84:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x400000L) != 0L)
         {
            jjmatchedKind = 406;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000100000000L, active2, 0x8000000L, active3, 0x4000040040L, active4, 0x80040011040020L, active5, 0x1220000800100L, active6, 0x20000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L, active2, 0xb000020100000L, active3, 0x1800000000000000L, active4, 0x1100000020000000L, active5, 0x400000000000L, active6, 0x32800L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0x800L, active4, 0x100L, active5, 0L, active6, 0L);
      case 87:
         if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc000000000000000L, active5, 0x100000000000007fL, active6, 0x2L);
      case 97:
         if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 372;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4001001000000400L, active2, 0x10000000000100L, active3, 0x80000000020000L, active4, 0x800400L, active5, 0x40000001000000L, active6, 0x1208L);
      case 98:
         if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L, active2, 0x10000L, active3, 0x2000000000000000L, active4, 0x1000000000000L, active5, 0L, active6, 0x800000L);
      case 99:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa000000020c000L, active2, 0x200000004044L, active3, 0x4000000280001000L, active4, 0x14000000020000L, active5, 0x2000000L, active6, 0x200000L);
      case 100:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L, active4, 0L, active5, 0x400000L, active6, 0x40L);
      case 101:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 301;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x800L) != 0L)
         {
            jjmatchedKind = 331;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 378;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x800e000000000010L, active2, 0x4001006d1000411L, active3, 0x1000c0404810006L, active4, 0x462000842000000L, active5, 0x8002200007000L, active6, 0x500L);
      case 103:
         if ((active5 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 348;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0x4700000000L, active5, 0x40000L, active6, 0x4000000L);
      case 104:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x100000L, active4, 0L, active5, 0x200000000000000L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000100L, active2, 0x8004000004200000L, active3, 0x1000000000000L, active4, 0x2000030000400200L, active5, 0x68000000L, active6, 0x1100000L);
      case 107:
         if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 375;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000L, active5, 0L, active6, 0L);
      case 108:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x200000L) != 0L)
         {
            jjmatchedKind = 341;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x900003800000L, active2, 0x200002000000000L, active3, 0x10020202000L, active4, 0x800800000002000L, active5, 0x2000004100000L, active6, 0x2000000L);
      case 109:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0x200L, active4, 0x10000L, active5, 0L, active6, 0L);
      case 110:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400L) != 0L)
         {
            jjmatchedKind = 330;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80000L) != 0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x830000000L, active2, 0x880800L, active3, 0x440e00000000000L, active4, 0x4000002L, active5, 0x8000L, active6, 0L);
      case 111:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0x10000003080400L, active4, 0x400080008000L, active5, 0x4000020200L, active6, 0L);
      case 112:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000088L, active4, 0x100000000000L, active5, 0x10400000000L, active6, 0x20L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000000L, active4, 0L, active5, 0x800000000L, active6, 0L);
      case 114:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3e400180000L, active2, 0L, active3, 0x10L, active4, 0x8000004L, active5, 0x2000000000000080L, active6, 0x80000L);
      case 115:
         if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x40000L) != 0L)
         {
            jjmatchedKind = 402;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400c0400000L, active2, 0xa8L, active3, 0x1808000100L, active4, 0L, active5, 0x120189080000000L, active6, 0x8000010L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x400000L) != 0L)
         {
            jjmatchedKind = 406;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000100000000L, active2, 0x8000000L, active3, 0x4000040040L, active4, 0x80040011040020L, active5, 0x1220000800100L, active6, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L, active2, 0xb000020100000L, active3, 0x1800000000000000L, active4, 0x1100000020000000L, active5, 0x400000000000L, active6, 0x32800L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0x800L, active4, 0x100L, active5, 0L, active6, 0L);
      case 119:
         if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000318c000L, active2, 0x2000010000L, active3, 0x280L, active4, 0x20e4800000060100L, active5, 0x100000404400000L, active6, 0L);
      case 66:
         if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0L, active5, 0x1000000L, active6, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x4000000L, active3, 0x4000000L, active4, 0x2000000000000L, active5, 0x2000000000008000L, active6, 0L);
      case 68:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x100000L) != 0L)
         {
            jjmatchedKind = 404;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40000L) != 0L)
         {
            jjmatchedKind = 338;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 373;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x80000L) != 0L)
         {
            jjmatchedKind = 403;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 409;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 411;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200003e630800200L, active2, 0L, active3, 0x1000004000001100L, active4, 0x1004008002002L, active5, 0x21000100100L, active6, 0x20030020L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30000000000L, active5, 0L, active6, 0L);
      case 71:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4000000L);
      case 72:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000108000000L, active2, 0x200020008000400L, active3, 0xa000000008002840L, active4, 0x10000010010000L, active5, 0x800000L, active6, 0xa01010L);
      case 75:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0x80000000L, active5, 0L, active6, 0L);
      case 76:
         if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200100000000000L, active2, 0x2000000000000L, active3, 0x1000021000010L, active4, 0L, active5, 0L, active6, 0x800L);
      case 77:
         if ((active5 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 350;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400004000000L, active2, 0L, active3, 0x800000L, active4, 0x800000L, active5, 0x400000020000L, active6, 0x208L);
      case 78:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L, active2, 0x40200000L, active3, 0x2000000L, active4, 0x400000L, active5, 0x8000200L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80040000000040L, active2, 0x8004000000000000L, active3, 0x40020200000000L, active4, 0x200L, active5, 0x200080000000000L, active6, 0L);
      case 80:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 408;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x1L, active3, 0L, active4, 0x400000000000000L, active5, 0L, active6, 0L);
      case 81:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000000L, active6, 0L);
      case 82:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x26000000000410L, active2, 0x408000480000010L, active3, 0x400050000L, active4, 0x1100000043000000L, active5, 0x14000000000L, active6, 0x2100L);
      case 83:
         if ((active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x40L) != 0L)
         {
            jjmatchedKind = 390;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xe00000000000L, active4, 0x2000000000L, active5, 0x7000L, active6, 0L);
      case 84:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x80L) != 0L)
         {
            jjmatchedKind = 327;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x400L) != 0L)
         {
            jjmatchedKind = 394;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80010c0000000L, active2, 0x1000000804008L, active3, 0x80001800020000L, active4, 0xc000000404000000L, active5, 0x104000008000007fL, active6, 0x2L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000L, active2, 0x4L, active3, 0x20000000000008L, active4, 0x100000000L, active5, 0x2000802000000L, active6, 0L);
      case 88:
         if ((active5 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 371;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000L, active6, 0L);
      case 89:
         if ((active5 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 368;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0L, active6, 0L);
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000318c000L, active2, 0x2000010000L, active3, 0x280L, active4, 0x20e4800000060100L, active5, 0x100000404400000L, active6, 0L);
      case 98:
         if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0L, active5, 0x1000000L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x4000000L, active3, 0x4000000L, active4, 0x2000000000000L, active5, 0x2000000000008000L, active6, 0L);
      case 100:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x100000L) != 0L)
         {
            jjmatchedKind = 404;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40000L) != 0L)
         {
            jjmatchedKind = 338;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 373;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x80000L) != 0L)
         {
            jjmatchedKind = 403;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 409;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 411;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200003e630800200L, active2, 0L, active3, 0x1000004000001100L, active4, 0x1004008002002L, active5, 0x21000100100L, active6, 0x20030020L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30000000000L, active5, 0L, active6, 0L);
      case 103:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4000000L);
      case 104:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000108000000L, active2, 0x200020008000400L, active3, 0xa000000008002840L, active4, 0x10000010010000L, active5, 0x800000L, active6, 0xa01010L);
      case 107:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0x80000000L, active5, 0L, active6, 0L);
      case 108:
         if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200100000000000L, active2, 0x2000000000000L, active3, 0x1000021000010L, active4, 0L, active5, 0L, active6, 0x800L);
      case 109:
         if ((active5 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 350;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400004000000L, active2, 0L, active3, 0x800000L, active4, 0x800000L, active5, 0x400000020000L, active6, 0x208L);
      case 110:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L, active2, 0x40200000L, active3, 0x2000000L, active4, 0x400000L, active5, 0x8000200L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80040000000040L, active2, 0x8004000000000000L, active3, 0x40020200000000L, active4, 0x200L, active5, 0x200080000000000L, active6, 0L);
      case 112:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 408;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x1L, active3, 0L, active4, 0x400000000000000L, active5, 0L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000000L, active6, 0L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x26000000000410L, active2, 0x408000480000010L, active3, 0x400050000L, active4, 0x1100000043000000L, active5, 0x14000000000L, active6, 0x2100L);
      case 115:
         if ((active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x40L) != 0L)
         {
            jjmatchedKind = 390;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xe00000000000L, active4, 0x2000000000L, active5, 0x7000L, active6, 0L);
      case 116:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x80L) != 0L)
         {
            jjmatchedKind = 327;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x400L) != 0L)
         {
            jjmatchedKind = 394;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80010c0000000L, active2, 0x1000000804008L, active3, 0x80001800020000L, active4, 0xc000000404000000L, active5, 0x104000008000007fL, active6, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000L, active2, 0x4L, active3, 0x20000000000008L, active4, 0x100000000L, active5, 0x2000802000000L, active6, 0L);
      case 120:
         if ((active5 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 371;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000L, active6, 0L);
      case 121:
         if ((active5 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 368;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0L, active6, 0L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0000000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x400000000000L, active2, 0x800000c000000L, active3, 0x4000200800200050L, active4, 0x113000000L, active5, 0x1000000001108000L, active6, 0x2L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000L, active5, 0L, active6, 0L);
      case 67:
         if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30180000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
         if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 377;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc000L, active2, 0L, active3, 0x200001000L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 358;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 374;
            jjmatchedPos = 5;
         }
         else if ((active6 & 0x200L) != 0L)
         {
            jjmatchedKind = 393;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L, active2, 0x200000000L, active3, 0x10000L, active4, 0x80400000L, active5, 0x410800000000L, active6, 0x4000108L);
      case 70:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200000L);
      case 71:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0x100000000000000L, active6, 0L);
      case 72:
         if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000000000000L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0x400000001804000L, active3, 0x1000020060000L, active4, 0x1000012004840000L, active5, 0x204000000L, active6, 0L);
      case 76:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0xc00000000800L, active4, 0x2000000000000000L, active5, 0L, active6, 0x800000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x8000000L, active5, 0x820100L, active6, 0L);
      case 78:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 5;
         }
         else if ((active6 & 0x1000L) != 0L)
         {
            jjmatchedKind = 396;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x18003e100000000L, active2, 0x4020000000010L, active3, 0xa000000000000000L, active4, 0x100000000000000L, active5, 0x20000000000L, active6, 0x32010L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40100000000000L, active2, 0L, active3, 0xc0008000000L, active4, 0x400000000000000L, active5, 0L, active6, 0L);
      case 82:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 351;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x68002c0000040L, active2, 0L, active3, 0x21400000380L, active4, 0x80000000000000L, active5, 0x81402000000L, active6, 0x20L);
      case 83:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400800000L, active2, 0x440000000L, active3, 0L, active4, 0xc030000000000000L, active5, 0x200000000007fL, active6, 0x20000000L);
      case 84:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 305;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 347;
            jjmatchedPos = 5;
         }
         else if ((active6 & 0x800L) != 0L)
         {
            jjmatchedKind = 395;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3000010L, active2, 0x2000000005L, active3, 0L, active4, 0x40000000010000L, active5, 0x407000L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000002L, active5, 0L, active6, 0L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 297;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200L, active6, 0L);
      case 97:
         if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x400000000000L, active2, 0x800000c000000L, active3, 0x4000200800200050L, active4, 0x113000000L, active5, 0x1000000001108000L, active6, 0x2L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000L, active5, 0L, active6, 0L);
      case 99:
         if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30180000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 100:
         if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 377;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc000L, active2, 0L, active3, 0x200001000L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 358;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 374;
            jjmatchedPos = 5;
         }
         else if ((active6 & 0x200L) != 0L)
         {
            jjmatchedKind = 393;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L, active2, 0x200000000L, active3, 0x10000L, active4, 0x80400000L, active5, 0x410800000000L, active6, 0x4000108L);
      case 102:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200000L);
      case 103:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0x100000000000000L, active6, 0L);
      case 104:
         if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000000000000L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0x400000001804000L, active3, 0x1000020060000L, active4, 0x1000012004840000L, active5, 0x204000000L, active6, 0L);
      case 108:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0xc00000000800L, active4, 0x2000000000000000L, active5, 0L, active6, 0x800000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x8000000L, active5, 0x820100L, active6, 0L);
      case 110:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 5;
         }
         else if ((active6 & 0x1000L) != 0L)
         {
            jjmatchedKind = 396;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x18003e100000000L, active2, 0x4020000000010L, active3, 0xa000000000000000L, active4, 0x100000000000000L, active5, 0x20000000000L, active6, 0x32010L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40100000000000L, active2, 0L, active3, 0xc0008000000L, active4, 0x400000000000000L, active5, 0L, active6, 0L);
      case 114:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 351;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x68002c0000040L, active2, 0L, active3, 0x21400000380L, active4, 0x80000000000000L, active5, 0x81402000000L, active6, 0x20L);
      case 115:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400800000L, active2, 0x440000000L, active3, 0L, active4, 0xc030000000000000L, active5, 0x200000000007fL, active6, 0x20000000L);
      case 116:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 305;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 347;
            jjmatchedPos = 5;
         }
         else if ((active6 & 0x800L) != 0L)
         {
            jjmatchedKind = 395;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3000010L, active2, 0x2000000005L, active3, 0L, active4, 0x40000000010000L, active5, 0x407000L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000002L, active5, 0L, active6, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 297;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000c0000000L, active2, 0x4000001000010L, active3, 0x2000c20000000000L, active4, 0x40000040000000L, active5, 0x2000000000007000L, active6, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000000L, active6, 0x2L);
      case 67:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100100000800000L, active2, 0L, active3, 0x200000240000L, active4, 0L, active5, 0L, active6, 0x10000L);
      case 69:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x400000L) != 0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x800000L) != 0L)
         {
            jjmatchedKind = 343;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2004000000008000L, active2, 0x400000000L, active3, 0x800L, active4, 0x10008000002L, active5, 0x100000000000100L, active6, 0L);
      case 71:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x10L) != 0L)
         {
            jjmatchedKind = 388;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000050L, active2, 0x2040000001L, active3, 0x1000000000L, active4, 0xe410000000000000L, active5, 0x200100002007fL, active6, 0xa02000L);
      case 76:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0x800000000000L, active5, 0L, active6, 0L);
      case 77:
         if ((active5 & 0x200L) != 0L)
         {
            jjmatchedKind = 329;
            jjmatchedPos = 6;
         }
         break;
      case 78:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 340;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0x10c0028010000L, active4, 0x40000L, active5, 0x400000000000L, active6, 0x100L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0x400000000L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0x10L, active4, 0L, active5, 0L, active6, 0x20000000L);
      case 82:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x400000L) != 0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 410;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x802000000L, active6, 0L);
      case 83:
         if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 363;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10601000000L, active6, 0L);
      case 84:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x3c020180000L, active2, 0x4800000L, active3, 0x800000000L, active4, 0x1000000006010000L, active5, 0x8000L, active6, 0x20028L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0x1000L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20100L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
         if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 6;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000c0000000L, active2, 0x4000001000010L, active3, 0x2000c20000000000L, active4, 0x40000040000000L, active5, 0x2000000000007000L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000000L, active6, 0x2L);
      case 99:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100100000800000L, active2, 0L, active3, 0x200000240000L, active4, 0L, active5, 0L, active6, 0x10000L);
      case 101:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x400000L) != 0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x800000L) != 0L)
         {
            jjmatchedKind = 343;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2004000000008000L, active2, 0x400000000L, active3, 0x800L, active4, 0x10008000002L, active5, 0x100000000000100L, active6, 0L);
      case 103:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x10L) != 0L)
         {
            jjmatchedKind = 388;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000050L, active2, 0x2040000001L, active3, 0x1000000000L, active4, 0xe410000000000000L, active5, 0x200100002007fL, active6, 0xa02000L);
      case 108:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0x800000000000L, active5, 0L, active6, 0L);
      case 109:
         if ((active5 & 0x200L) != 0L)
         {
            jjmatchedKind = 329;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 340;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0x10c0028010000L, active4, 0x40000L, active5, 0x400000000000L, active6, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0x400000000L, active4, 0L, active5, 0L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0x10L, active4, 0L, active5, 0L, active6, 0x20000000L);
      case 114:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x400000L) != 0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 410;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x802000000L, active6, 0L);
      case 115:
         if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 363;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10601000000L, active6, 0L);
      case 116:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x3c020180000L, active2, 0x4800000L, active3, 0x800000000L, active4, 0x1000000006010000L, active5, 0x8000L, active6, 0x20028L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0x1000L, active4, 0L, active5, 0L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20100L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 6;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000L, active6, 0x20000000L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0L, active6, 0L);
      case 67:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         else if ((active6 & 0x200000L) != 0L)
         {
            jjmatchedKind = 405;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0x10000L, active4, 0L, active5, 0L, active6, 0x100L);
      case 68:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x8000L) != 0L)
         {
            jjmatchedKind = 335;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 344;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 7;
         }
         else if ((active6 & 0x10000L) != 0L)
         {
            jjmatchedKind = 400;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000180000L, active2, 0L, active3, 0xc0000000000L, active4, 0x2010000L, active5, 0x2000000L, active6, 0x8L);
      case 71:
         if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xe0000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x20020L);
      case 75:
         if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 7;
         }
         break;
      case 76:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L, active5, 0x1000000000000000L, active6, 0x2L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x7000L, active6, 0L);
      case 78:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0x400000008000000L, active5, 0x100L, active6, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x402000010L, active2, 0x2004000001L, active3, 0L, active4, 0x10000000000000L, active5, 0L, active6, 0L);
      case 82:
         if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 381;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000020000001000L, active4, 0L, active5, 0L, active6, 0L);
      case 83:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000000L, active2, 0x41000000L, active3, 0xe00000000000L, active4, 0L, active5, 0x200020000L, active6, 0x800000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000000000L, active6, 0L);
      case 89:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 90:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x3c000000000L, active2, 0L, active3, 0x8000000L, active4, 0xc000000000000000L, active5, 0x10000000000007fL, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000L, active6, 0x20000000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0L, active6, 0L);
      case 99:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         else if ((active6 & 0x200000L) != 0L)
         {
            jjmatchedKind = 405;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0x10000L, active4, 0L, active5, 0L, active6, 0x100L);
      case 100:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x8000L) != 0L)
         {
            jjmatchedKind = 335;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 344;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 7;
         }
         else if ((active6 & 0x10000L) != 0L)
         {
            jjmatchedKind = 400;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000180000L, active2, 0L, active3, 0xc0000000000L, active4, 0x2010000L, active5, 0x2000000L, active6, 0x8L);
      case 103:
         if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xe0000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x20020L);
      case 107:
         if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 7;
         }
         break;
      case 108:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L, active5, 0x1000000000000000L, active6, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x7000L, active6, 0L);
      case 110:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0x400000008000000L, active5, 0x100L, active6, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x402000010L, active2, 0x2004000001L, active3, 0L, active4, 0x10000000000000L, active5, 0L, active6, 0L);
      case 114:
         if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 381;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000020000001000L, active4, 0L, active5, 0L, active6, 0L);
      case 115:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000000L, active2, 0x41000000L, active3, 0xe00000000000L, active4, 0L, active5, 0x200020000L, active6, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000000000L, active6, 0L);
      case 121:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active1, 0x40L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0x20000L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active1, 0x80000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x20000000L);
      case 68:
         if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4L, active6, 0L);
      case 69:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 369;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 380;
            jjmatchedPos = 8;
         }
         else if ((active6 & 0x2L) != 0L)
         {
            jjmatchedKind = 385;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0x10800L, active4, 0L, active5, 0L, active6, 0x20L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L);
      case 71:
         if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 8;
         }
         else if ((active6 & 0x2000L) != 0L)
         {
            jjmatchedKind = 397;
            jjmatchedPos = 8;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000000000L, active2, 0x40000000L, active3, 0xa00000000000L, active4, 0L, active5, 0L, active6, 0x100L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0x100001000000000L, active6, 0L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x11L, active6, 0L);
      case 78:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x4c0000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
         if ((active5 & 0x1000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x6000L, active6, 0L);
      case 81:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20L, active6, 0L);
      case 82:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 8;
         }
         else if ((active6 & 0x8L) != 0L)
         {
            jjmatchedKind = 387;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 83:
         if ((active5 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x8000000000000000L, active5, 0L, active6, 0L);
      case 84:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x100L) != 0L)
         {
            jjmatchedKind = 328;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x118000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000000L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8L, active6, 0L);
      case 89:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 8;
         }
         else if ((active6 & 0x800000L) != 0L)
         {
            jjmatchedKind = 407;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0xc0000000000L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0x40L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0x20000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x80000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x20000000L);
      case 100:
         if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4L, active6, 0L);
      case 101:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 369;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 380;
            jjmatchedPos = 8;
         }
         else if ((active6 & 0x2L) != 0L)
         {
            jjmatchedKind = 385;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0x10800L, active4, 0L, active5, 0L, active6, 0x20L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L);
      case 103:
         if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 8;
         }
         else if ((active6 & 0x2000L) != 0L)
         {
            jjmatchedKind = 397;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000000000L, active2, 0x40000000L, active3, 0xa00000000000L, active4, 0L, active5, 0L, active6, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0x100001000000000L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x11L, active6, 0L);
      case 110:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x4c0000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 112:
         if ((active5 & 0x1000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x6000L, active6, 0L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20L, active6, 0L);
      case 114:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 8;
         }
         else if ((active6 & 0x8L) != 0L)
         {
            jjmatchedKind = 387;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 115:
         if ((active5 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x8000000000000000L, active5, 0L, active6, 0L);
      case 116:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x100L) != 0L)
         {
            jjmatchedKind = 328;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x118000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000000L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8L, active6, 0L);
      case 121:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 8;
         }
         else if ((active6 & 0x800000L) != 0L)
         {
            jjmatchedKind = 407;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2004L, active6, 0L);
      case 66:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000L, active6, 0L);
      case 69:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 9;
         }
         else if ((active6 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 413;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x8000000000000000L, active5, 0x20048L, active6, 0L);
      case 72:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active1, 0x18000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000001L, active6, 0L);
      case 76:
         if ((active6 & 0x20000L) != 0L)
         {
            jjmatchedKind = 401;
            jjmatchedPos = 9;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0x80000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x100L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0xa00000000000L, active4, 0L, active5, 0x100000000000012L, active6, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L);
      case 83:
         if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 9;
         }
         else if ((active6 & 0x20L) != 0L)
         {
            jjmatchedKind = 389;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x20000000000L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0L);
      case 84:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x80000040L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20L, active6, 0L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2004L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000L, active6, 0L);
      case 101:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 9;
         }
         else if ((active6 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 413;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x8000000000000000L, active5, 0x20048L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x18000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000001L, active6, 0L);
      case 108:
         if ((active6 & 0x20000L) != 0L)
         {
            jjmatchedKind = 401;
            jjmatchedPos = 9;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0x80000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0xa00000000000L, active4, 0L, active5, 0x100000000000012L, active6, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L);
      case 115:
         if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 9;
         }
         else if ((active6 & 0x20L) != 0L)
         {
            jjmatchedKind = 389;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x20000000000L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x80000040L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000004000000L, active5, 0x60L, active6, 0L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000000000L, active5, 0x100000002000000L, active6, 0L);
      case 68:
         if ((active5 & 0x20000L) != 0L)
         {
            jjmatchedKind = 337;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000L, active6, 0L);
      case 69:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0x20000000000L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0x8L, active6, 0L);
      case 71:
         if ((active6 & 0x100L) != 0L)
         {
            jjmatchedKind = 392;
            jjmatchedPos = 10;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000040L, active2, 0L, active3, 0x80000000000L, active4, 0L, active5, 0x4000L, active6, 0L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active1, 0x100000L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active1, 0x18000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
         if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x11L, active6, 0L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
         if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 10;
         }
         break;
      case 83:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 10;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L, active6, 0L);
      case 89:
         if ((active5 & 0x4L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 10;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000004000000L, active5, 0x60L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000000000L, active5, 0x100000002000000L, active6, 0L);
      case 100:
         if ((active5 & 0x20000L) != 0L)
         {
            jjmatchedKind = 337;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000L, active6, 0L);
      case 101:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0x20000000000L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0x8L, active6, 0L);
      case 103:
         if ((active6 & 0x100L) != 0L)
         {
            jjmatchedKind = 392;
            jjmatchedPos = 10;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000040L, active2, 0L, active3, 0x80000000000L, active4, 0L, active5, 0x4000L, active6, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0x100000L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active1, 0x18000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x11L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 114:
         if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 10;
         }
         break;
      case 115:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 10;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L, active6, 0L);
      case 121:
         if ((active5 & 0x4L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 10;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private final int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x100000000000000L);
      case 67:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 68:
         if ((active5 & 0x2000L) != 0L)
         {
            jjmatchedKind = 333;
            jjmatchedPos = 11;
         }
         break;
      case 69:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 11;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 356;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0x10000100000L, active3, 0L, active4, 0L, active5, 0L);
      case 70:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x4000L);
      case 75:
         if ((active5 & 0x8L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 11;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active1, 0x400000000L, active3, 0x80000000000L, active4, 0L, active5, 0L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active1, 0x40L, active3, 0L, active4, 0x8000000000000000L, active5, 0x2000000L);
      case 82:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 11;
         }
         else if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x2L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x40L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x20L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x10L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0x40000000000L, active4, 0L, active5, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x100000000000000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 100:
         if ((active5 & 0x2000L) != 0L)
         {
            jjmatchedKind = 333;
            jjmatchedPos = 11;
         }
         break;
      case 101:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 11;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 356;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0x10000100000L, active3, 0L, active4, 0L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x4000L);
      case 107:
         if ((active5 & 0x8L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 11;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active1, 0x400000000L, active3, 0x80000000000L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active1, 0x40L, active3, 0L, active4, 0x8000000000000000L, active5, 0x2000000L);
      case 114:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 11;
         }
         else if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x2L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x40L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active3, 0x40000000000L, active4, 0L, active5, 0x1L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private final int jjMoveStringLiteralDfa12_0(long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 70:
         if ((active5 & 0x4000L) != 0L)
         {
            jjmatchedKind = 334;
            jjmatchedPos = 12;
         }
         break;
      case 71:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 12;
         }
         break;
      case 72:
         if ((active5 & 0x10L) != 0L)
         {
            jjmatchedKind = 324;
            jjmatchedPos = 12;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x100000000000000L);
      case 78:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x100000L, active3, 0L, active4, 0x8000000000000000L, active5, 0x2000000L);
      case 82:
         if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 12;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x21L);
      case 85:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active3, 0x80000000000L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active3, 0L, active4, 0x4000000004000000L, active5, 0L);
      case 102:
         if ((active5 & 0x4000L) != 0L)
         {
            jjmatchedKind = 334;
            jjmatchedPos = 12;
         }
         break;
      case 103:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 12;
         }
         break;
      case 104:
         if ((active5 & 0x10L) != 0L)
         {
            jjmatchedKind = 324;
            jjmatchedPos = 12;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x100000000000000L);
      case 110:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x100000L, active3, 0L, active4, 0x8000000000000000L, active5, 0x2000000L);
      case 114:
         if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 12;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x21L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active3, 0x80000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 68:
         if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 13;
         }
         break;
      case 69:
         if ((active5 & 0x1L) != 0L)
         {
            jjmatchedKind = 320;
            jjmatchedPos = 13;
         }
         else if ((active5 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 376;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x20L);
      case 71:
         return jjMoveStringLiteralDfa14_0(active1, 0x100000L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x2000000L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active1, 0x10000000000L, active3, 0x80000000000L, active4, 0L, active5, 0L);
      case 100:
         if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 13;
         }
         break;
      case 101:
         if ((active5 & 0x1L) != 0L)
         {
            jjmatchedKind = 320;
            jjmatchedPos = 13;
         }
         else if ((active5 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 376;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active1, 0x100000L, active3, 0L, active4, 0L, active5, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active1, 0x10000000000L, active3, 0x80000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 82:
         if ((active5 & 0x20L) != 0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 14;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa15_0(active1, 0x100000L, active3, 0L, active4, 0L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 101:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 114:
         if ((active5 & 0x20L) != 0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 14;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0x100000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active4, 0x4000000004000000L, active5, 0x2000000L);
      case 72:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 15;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa16_0(active1, 0x10000000000L, active4, 0L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active4, 0x4000000004000000L, active5, 0x2000000L);
      case 104:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 15;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa16_0(active1, 0x10000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0x4000000L, active5, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 80:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 16;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0L, active5, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0x4000000L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 112:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 16;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0L, active5, 0x2000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x2000000L);
      case 76:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 17;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa18_0(active4, 0x4000000000000000L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x2000000L);
      case 108:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 17;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa18_0(active4, 0x4000000000000000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private final int jjMoveStringLiteralDfa18_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 68:
         if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 18;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x2000000L);
      case 100:
         if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 18;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x2000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
private final int jjMoveStringLiteralDfa19_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 78:
         if ((active5 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 345;
            jjmatchedPos = 19;
         }
         break;
      case 110:
         if ((active5 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 345;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
static final long[] jjbitVec3 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfc3fffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffL, 0xffffffffffff0000L, 0xf9ff01ffffffffffL, 0x1f00030003L
};
static final long[] jjbitVec7 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec9 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec10 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0xd7ffffffffffeL, 0x7fL, 0x200d6caefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec18 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec21 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec22 = {
   0x0L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec23 = {
   0x1fbfd503f2ffc84L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0x3e000000000020L, 0xfffffffffffffffeL, 0xfffffffe781fffffL, 0x77ffffffffffffffL
};
static final long[] jjbitVec25 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0x7fffL, 0x0L
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec29 = {
   0x5f7ffdff80f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec30 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec31 = {
   0x0L, 0xffd7000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec32 = {
   0x7fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec33 = {
   0x7fffffe00000000L, 0xfffe03ff000007ffL, 0x7cffffffffffffffL, 0x3ff0060002f7fffL
};
static final long[] jjbitVec34 = {
   0x23ffffffffffffe0L, 0xffc3ff000000L, 0x3c5fdfffff99fe0L, 0x3ffc3b0000000L
};
static final long[] jjbitVec35 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbafe0L, 0xffc100000000L
};
static final long[] jjbitVec36 = {
   0x23cdfdfffff99fe0L, 0xffc3b0000000L, 0x3bfc718d63dc7e0L, 0xff8000000000L
};
static final long[] jjbitVec37 = {
   0x3effdfffffddfe0L, 0xffc300000000L, 0x3effdfffffddfe0L, 0xffc340000000L
};
static final long[] jjbitVec38 = {
   0x3fffdfffffddfe0L, 0xffc300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0xd7ffffffffffeL, 0x3ff007fL, 0x200d6caefef02596L, 0x33ff005fL
};
static final long[] jjbitVec40 = {
   0x3ff00000000L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec41 = {
   0x7fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 137;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 452)
                        kind = 452;
                     jjCheckNAddStates(3, 10);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(135, 136);
                  else if (curChar == 39)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 445)
                     kind = 445;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 3:
                  if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  break;
               case 4:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 6:
                  if (curChar == 34 && kind > 451)
                     kind = 451;
                  break;
               case 7:
               case 8:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 13);
                  break;
               case 9:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 11:
                  if (curChar == 39 && kind > 455)
                     kind = 455;
                  break;
               case 13:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 456)
                     kind = 456;
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 29);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 45)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 39)
                     jjAddStates(30, 33);
                  break;
               case 27:
                  if (curChar == 40)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 41 && kind > 458)
                     kind = 458;
                  break;
               case 33:
                  if (curChar == 40)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 90:
                  if (curChar == 32)
                     jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 92:
                  if (curChar == 58)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 94:
                  if (curChar == 58)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 96:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(97, 24);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(97, 24);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 99:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(100, 24);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(100, 24);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 102:
                  if (curChar == 58)
                     jjCheckNAdd(103);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 104:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(105, 24);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(105, 24);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 107:
                  if (curChar == 58)
                     jjCheckNAdd(108);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(58, 60);
                  break;
               case 109:
                  if (curChar == 58)
                     jjCheckNAdd(110);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 111:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(112, 24);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(112, 24);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 452)
                     kind = 452;
                  jjCheckNAddStates(3, 10);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 452)
                     kind = 452;
                  jjCheckNAddTwoStates(122, 123);
                  break;
               case 123:
                  if (curChar != 46)
                     break;
                  if (kind > 452)
                     kind = 452;
                  jjCheckNAdd(124);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 452)
                     kind = 452;
                  jjCheckNAdd(124);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 453)
                     kind = 453;
                  jjCheckNAdd(125);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(126, 127);
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 129:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 132:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(133);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 457)
                     kind = 457;
                  jjCheckNAdd(133);
                  break;
               case 134:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 452)
                     kind = 452;
                  jjCheckNAdd(135);
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(136, 131);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 445)
                        kind = 445;
                     jjCheckNAdd(1);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 445)
                     kind = 445;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  jjAddStates(14, 16);
                  break;
               case 10:
                  jjAddStates(11, 13);
                  break;
               case 12:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 16:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 25:
                  if (curChar == 121)
                     jjAddStates(72, 73);
                  break;
               case 26:
                  if (curChar != 114)
                     break;
                  if (kind > 458)
                     kind = 458;
                  jjCheckNAdd(27);
                  break;
               case 30:
                  if (curChar == 97)
                     jjCheckNAdd(26);
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 114)
                     jjCheckNAddTwoStates(33, 57);
                  break;
               case 36:
                  if (curChar == 111)
                     jjAddStates(74, 77);
                  break;
               case 37:
                  if (curChar == 114 && kind > 458)
                     kind = 458;
                  break;
               case 38:
                  if (curChar == 97)
                     jjCheckNAdd(37);
                  break;
               case 39:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 121 && kind > 458)
                     kind = 458;
                  break;
               case 42:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 117)
                     jjCheckNAdd(37);
                  break;
               case 45:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 109)
                     jjAddStates(78, 79);
                  break;
               case 48:
                  if (curChar == 104 && kind > 458)
                     kind = 458;
                  break;
               case 49:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 101 && kind > 458)
                     kind = 458;
                  break;
               case 53:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 58:
                  if (curChar == 97)
                     jjCheckNAdd(32);
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 100)
                     jjAddStates(80, 81);
                  break;
               case 61:
                  if (curChar != 121)
                     break;
                  if (kind > 458)
                     kind = 458;
                  jjCheckNAdd(27);
                  break;
               case 62:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 121)
                     jjCheckNAddTwoStates(33, 57);
                  break;
               case 64:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 104)
                     jjAddStates(82, 83);
                  break;
               case 66:
                  if (curChar == 117)
                     jjCheckNAdd(26);
                  break;
               case 67:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 117)
                     jjCheckNAdd(32);
                  break;
               case 69:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 109)
                     jjAddStates(84, 87);
                  break;
               case 71:
                  if (curChar != 104)
                     break;
                  if (kind > 458)
                     kind = 458;
                  jjCheckNAdd(27);
                  break;
               case 72:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar != 101)
                     break;
                  if (kind > 458)
                     kind = 458;
                  jjCheckNAdd(27);
                  break;
               case 76:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 104)
                     jjCheckNAddTwoStates(33, 57);
                  break;
               case 81:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 101)
                     jjCheckNAddTwoStates(33, 57);
                  break;
               case 85:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 114:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 115:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 127:
                  if ((0x288000002880L & l) != 0L && kind > 454)
                     kind = 454;
                  break;
               case 131:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 445)
                     kind = 445;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 445)
                     kind = 445;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(14, 16);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 137 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjStopStringLiteralDfa_16(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 0;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0)
{
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_16(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_16(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_16()
{
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa1_16(0x20000000000000L);
      case 83:
         return jjStopAtPos(0, 54);
      case 100:
         return jjMoveStringLiteralDfa1_16(0x20000000000000L);
      case 115:
         return jjStopAtPos(0, 54);
      default :
         return jjMoveNfa_16(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_16(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa2_16(active0, 0x20000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(0, active0);
}
private final int jjMoveStringLiteralDfa2_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa3_16(active0, 0x20000000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(1, active0);
}
private final int jjMoveStringLiteralDfa3_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa4_16(active0, 0x20000000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(2, active0);
}
private final int jjMoveStringLiteralDfa4_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 89:
         return jjMoveStringLiteralDfa5_16(active0, 0x20000000000000L);
      case 121:
         return jjMoveStringLiteralDfa5_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(3, active0);
}
private final int jjMoveStringLiteralDfa5_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa6_16(active0, 0x20000000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(4, active0);
}
private final int jjMoveStringLiteralDfa6_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_16(active0, 0x20000000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(5, active0);
}
private final int jjMoveStringLiteralDfa7_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa8_16(active0, 0x20000000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(6, active0);
}
private final int jjMoveStringLiteralDfa8_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa9_16(active0, 0x20000000000000L);
      case 104:
         return jjMoveStringLiteralDfa9_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(7, active0);
}
private final int jjMoveStringLiteralDfa9_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa10_16(active0, 0x20000000000000L);
      case 112:
         return jjMoveStringLiteralDfa10_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(8, active0);
}
private final int jjMoveStringLiteralDfa10_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa11_16(active0, 0x20000000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(9, active0);
}
private final int jjMoveStringLiteralDfa11_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa12_16(active0, 0x20000000000000L);
      case 111:
         return jjMoveStringLiteralDfa12_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(10, active0);
}
private final int jjMoveStringLiteralDfa12_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa13_16(active0, 0x20000000000000L);
      case 112:
         return jjMoveStringLiteralDfa13_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(11, active0);
}
private final int jjMoveStringLiteralDfa13_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_16(active0, 0x20000000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(12, active0);
}
private final int jjMoveStringLiteralDfa14_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa15_16(active0, 0x20000000000000L);
      case 114:
         return jjMoveStringLiteralDfa15_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(13, active0);
}
private final int jjMoveStringLiteralDfa15_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa16_16(active0, 0x20000000000000L);
      case 116:
         return jjMoveStringLiteralDfa16_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(14, active0);
}
private final int jjMoveStringLiteralDfa16_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa17_16(active0, 0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa17_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(15, active0);
}
private final int jjMoveStringLiteralDfa17_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa18_16(active0, 0x20000000000000L);
      case 101:
         return jjMoveStringLiteralDfa18_16(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(16, active0);
}
private final int jjMoveStringLiteralDfa18_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(18, 53);
         break;
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(18, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_16(17, active0);
}
private final int jjMoveNfa_16(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 56)
                     kind = 56;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 55)
                     kind = 55;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 56)
                     kind = 56;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfff7fffffff7ffffL & l) != 0L)
                     kind = 56;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 56)
                     kind = 56;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 82:
         return jjStopAtPos(0, 41);
      case 114:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private final int jjMoveNfa_12(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 43)
                     kind = 43;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 42)
                     kind = 42;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 43)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffbfffffffbffffL & l) != 0L)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 43)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 80:
         return jjStopAtPos(0, 26);
      case 112:
         return jjStopAtPos(0, 26);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 28)
                     kind = 28;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 27)
                     kind = 27;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffefffffffeffffL & l) != 0L)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   0, 1, 3, 122, 123, 125, 126, 127, 128, 129, 131, 9, 10, 11, 4, 5, 
   6, 21, 22, 23, 89, 90, 98, 99, 101, 102, 106, 107, 24, 113, 25, 60, 
   65, 70, 89, 90, 24, 91, 92, 24, 93, 94, 24, 95, 96, 24, 98, 99, 
   24, 101, 102, 24, 103, 104, 24, 106, 107, 24, 108, 109, 24, 110, 111, 24, 
   23, 24, 113, 128, 129, 131, 14, 15, 31, 59, 40, 43, 46, 47, 51, 56, 
   62, 64, 67, 69, 74, 79, 83, 88, 132, 133, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec32[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec41[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_COMMENT", 
   "LOOKFOR_DE", 
   "LOOKFOR_DER", 
   "LOOKFOR_DERB", 
   "LOOKFOR_DERBY", 
   "LOOKFOR_DERBYDASH", 
   "LOOKFOR_DERBYDASHP", 
   "LOOKFOR_DERBYDASHPR", 
   "LOOKFOR_DERBYDASHPRO", 
   "LOOKFOR_DERBYDASHPROP", 
   "LOOKFOR_DERBYDASHPROPE", 
   "LOOKFOR_DERBYDASHPROPER", 
   "LOOKFOR_DERBYDASHPROPERT", 
   "LOOKFOR_DERBYDASHPROPERTI", 
   "LOOKFOR_DERBYDASHPROPERTIE", 
   "LOOKFOR_DERBYDASHPROPERTIES", 
   "IT_IS_NOT_DERBYPROPERTIES_COMMENT", 
   "PROPERTIES_LIST", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, -1, 2, 0, 17, 3, 0, 17, 4, 0, 17, 5, 0, 17, 6, 0, 17, 7, 0, 
   17, 8, 0, 17, 9, 0, 17, 10, 0, 17, 11, 0, 17, 12, 0, 17, 13, 0, 17, 14, 0, 17, 15, 0, 17, 
   16, 0, 17, -1, 18, 0, 17, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfc60000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7f9L, 
};
static final long[] jjtoSkip = {
   0x3800000000000feL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1fffffffffff00L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[137];
private final int[] jjstateSet = new int[274];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public SQLParserTokenManager(CharStream stream){
   input_stream = stream;
}
public SQLParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 137; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 19 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 9;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 12;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 15;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 18;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 21;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 24;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 27;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 30;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
       case 9:
         jjmatchedKind = 33;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         break;
       case 10:
         jjmatchedKind = 36;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
       case 11:
         jjmatchedKind = 39;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         break;
       case 12:
         jjmatchedKind = 42;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         break;
       case 13:
         jjmatchedKind = 45;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         break;
       case 14:
         jjmatchedKind = 48;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         break;
       case 15:
         jjmatchedKind = 51;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_15();
         break;
       case 16:
         jjmatchedKind = 55;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_16();
         break;
       case 17:
         jjmatchedKind = 57;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_17();
         break;
       case 18:
         jjmatchedKind = 58;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_18();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 54 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      matchedToken.kind = DERBYDASHPROPERTIES;
         break;
      default : 
         break;
   }
}
}
